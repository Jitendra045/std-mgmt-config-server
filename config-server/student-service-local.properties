#url for webClient
webservice.organizationservice.url=http://organization-service-local/org
webservice.resultservice.url=http://result-service-local/result
webservice.examservice.url=http://exam-service-local/exam


spring.application.name=student-service-local

#Student service
request.studentservice.post.applyForCollege=/api/college/apply
request.studentservice.get.getResutlOfStudentByStudentUsername=/api/result/
request.studentservice.get.getAllExamDetail=/api/exam
request.studentservice.get.testOrganizationEndpoint.testGetRequest=/api/v1/test
request.studentservice.get.testOrganizationEndpoint.testPostRequest=/add
request.studentservice.get.testOrganizationEndpoint.testGetRequetByUsername=/path/Jitendra
request.studentservice.get.testOrganizationEndpoint.testGetRequetWithQueryParams.key=studentUsername=
request.studentservice.get.testOrganizationEndpoint.testGetRequetWithQueryParams.value=Jitendra

topic.kafka.name=studentNotificationTopic

#database configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/studentmgmt
#encrypted using jaspy 
#spring.datasource.username=ENC(L0RS5jfzU+xCCOe+32PIfYKRbMClX89cB6SN0B+z7g17HqJURzdGAk0/6o90j5Iz)
#spring.datasource.password=ENC(W4MyospuXt209hKIeYbXtylUw0xJE6p2QP0T6FuQZ9bMXKSDLZiVurwOiYsHvA7A)//postgres
spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=create-drop



test.bindAddress=http://localhost:9001

#eureka configuration
#discovery server
eureka.client.serviceUrl.defaultZone =http://localhost:8761/eureka

#kafka
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=studentNotificationTopic
spring.kafka.producer.group-id= notificationId
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.ridhima.stdmgmt.model.common.NotificationRequest


#curcuit breaker

#Resilinece4j Properties
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always


resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true
#Resilience4J Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s
#Resilience4J Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

